

### ΑΡΧΙΤΕΚΤΟΝΙΚΗ ΥΠΟΛΟΓΙΣΤΩΝ_  
                                      3η Εργαστηριακή Άσκηση




#### Βήμα 1ο - εξομοίωση με τον McPAT

Πρόκειται για σύστημα εξομοίωσης της ενέργειας του χώρου και του χρονισμού πολυνηματικών και πολυπύρηνων αρχιτεκτονικών. Περιλαμβάνει τα μοντέλα επεξεργαστών, το δίκτυο επικοινωνίας, την κοινόχρηστη κρυφή μνήμη Cache και τους ελεγκτές μνήμης για να μπορέσει να εξάγει συμπεράσματα για τον χρονισμό, την έκταση του επεξεργαστή, την κατανάλωση ενέργειας για διάφορες τεχνολογίες από 90nm μέχρι 20nm.

Σημείωση:

Για να κάνουμε compile με make χρειάστηκαν τα ακόλουθα πακέτα :

* sudo apt-get install g++-multilib για 64bit και
* sudo apt install gcc-7-multilib g++-7-multilib

Εν συνεχεία ακολούθησε εκτέλεση του McPAT για τον επεξεργαστή Xeon από το φάκελο ProcessorDescriptionFiles με print_level : 1,2,3,4,5 (Ανάλογα με τον αριθμό του print_level εκτυπώνονται στο τερματικό περισσότερες πληροφορίες)

Ερώτημα 1o:  

Τα αποτελέσματα που εκτυπώθηκαν από την προσομοίωση με τον McPAT Xeon έίναι :

*Τεχνολογία Τρανζίστορ : 65nm

*Κατανάλωση Ισχύος Επεξεργαστή
    *Peak Power : 134.938 W
    *Total Leakage : 36.8319 W
        *Subthreshold Leakage : 35.1632 W
        *Gate Leakage : 1.66871 W
    *Peak Dynamic : 98.1063 W
        *Runtime Dynamic : 72.9199 W

#### Power Dissipation

Η Κατανάλωση Ισχύος σε ένα ολοκληρωμένο κύκλωμα χωρίζεται σε 2 κατηγορίες. Την στατική κατανάλωση ισχύος (Static Power dissipation ή Power Leakage) και την δυναμική κατανάλωση ισχύος (Dynamic power dissipation). Την ενέργεια αυτή την καταναλώνει κάθε διακόπτης για να αλλάξει ή για να διατηρήσει την κατάσταση που βρίσκεται (on ή off).

* Η στατική κατανάλωση ισχύος αναφέρεται στην ισχύ που καταναλώνει ένας διακόπτης/τρανζίστορ για να βρίσκεται σε λειτουργία. Θεωρητικά εντοπίζεται ροή ρεύματος μόνο μεταξύ της πηγής και του εκπομπού του τρανζίστορ. Όμως στην πράξη, υπάρχουν μικρά ρεύματα από την πύλη (Gate leakage) και το υπόστρωμα (Subthreshold leakage) που απορροφούν ενέργεια ανάλογη της τάσης τροφοδοσίας, της τάσης κατωφλίου και του λόγου W/L δηλαδή των μεγεθών του τρανζίστορ. Η ισχύς αυτή καταναλώνεται ακόμα και στην αλλαγή της κατάστασης του διακόπτη και για αυτό ονομάζεται Στατική.

* Η Δυναμική Κατανάλωση ισχύος εντοπίζεται κατά την αλλαγή της κατάστασης του αντιστροφέα και οφείλεται στην ύπαρξη ροής ρεύματος διαμέσου του διακόπτη για την φόρτιση και εκφόρτιση του χωρητικού φορτίου αλλά και ρεύματα βραχυκύκλωσης διαμέσου των τρανζίστορ του διακόπτη. Αυτά τα ρεύματα αναγκάζουν τους διακόπτες να καταναλώνουν ισχύ που ονομάζεται Δυναμική κατανάλωση Ισχύος. Αυτή η ισχύς αυξάνεται με την αύξηση της συχνότητας του ρολογιού, την τάση τροφοδοσίας και της χωρητικότητας του τρανζίστορ. Η νέες τεχνολογίες μικραίνουν την τάση τροφοδοσίας αλλά οι απαιτήσεις για μεγάλη συχνότητα μπορούν να αυξήσουν την ισχύ αυτή σημαντικά.

#### Πως ένα πρόγραμμα επηρεάζει την Κατανάλωση Ισχύος

Η Δυναμική Κατανάλωση Ισχύος (Dynamic Power) και η Στατική Κατανάλωση Ισχύος (Leakage Power) επηρεάζονται διαφορετικά από την συμπεριφορά του συστήματος. Η Στατική Ισχύς απαιτείται είτε το σύστημα βρίσκεται σε χρήση είτε σε αναμονή. Αντίθετα το Dynamic Power απαιτείται μόνο κατά την χρήση των ολοκληρωμένων στο σύστημα ενώ σε κατάσταση αναμονής δεν υπάρχει δυναμική κατανάλωση Ισχύος.

Επομένως ένα πρόγραμμα επηρεάζει μόνο το Dynamic Power του συστήματος. Η κατανάλωση αυτή μπορεί να μειωθεί με την χρήση εντολών που απαιτούν μικρότερο αριθμό κύκλων και κατά επέκταση μικρότερη συχνότητα λειτουργίας ή με την παράλληλοποίηση του προγράμματος σε πολυπύρηνα συστήματα. Επιπλέον σημαντικός παράγοντας κατανάλωσης ενέργειας είναι οι προσπελάσεις στην μνήμη ενός προγράμματος. Σε κάθε αναζήτηση ενεργοποιούνται οι διακόπτες των κυκλωμάτων της μνήμης με αποτέλεσμα να έχουμε μεγάλη κατανάλωση ισχύος και αύξηση του Dynamic Power.

Η χρονική διάρκεια του προγράμματος, δεδομένου ότι το σύστημα εκτελεί μόνο αυτό και τερματίζει επηρεάζει το Leakage Power. Σε όλη την διάρκεια που το σύστημα είναι ενεργοποιημένο, ανεξάρτητα από το ποσοστό χρήσης του, καταναλώνει ενέργεια με αποτέλεσμα τα προγράμματα με μεγαλύτερη διάρκεια να αυξάνουν την Στατική Κατανάλωση Ισχύος.
    


#### Ερώτημα 2o:  

Η **Ενεργειακή Αποδοτικότητα** είναι ο αριθμός των λειτουργιών που εκτελεί ένα σύστημα προς την ισχύ που καταναλώνει. Ο όρος αυτός είναι το μέτρο σύγκρισης των συστημάτων με διαφορετική υπολογιστική ισχύ και κατανάλωση.

Επομένως γνωρίζοντας μόνο την κατανάλωση των 2 επεξεργαστών δεν μπορούμε να συμπεράνουμε ποιος είναι κατάλληλος για την χρήση του στο σύστημα αυτό αλλά χρειαζόμαστε και τον αριθμό των λειτουργιών που εκτελεί ο επεξεργαστής ανά μονάδα Watt. Υπάρχει περίπτωση ο πρώτος επεξεργαστής να εκτελεί περίπου 0.5 operations Per Watt και ο δεύτερος 4 operations Per Watt. Άρα για ένα πρόγραμμα 100 operations ο πρώτος θα καταναλώσει 200Watt ενώ ο δεύτερος 25Watt !
Energy Efficiency McPat

Τα αποτελέσματα του McPAT περιέχουν στοιχεία για την συχνότητα λειτουργίας, την τεχνολογία των τρανζίστορ της συνολικής αρχιτεκτονικής και επιπλέον την κατανάλωση ισχύος, και την επιφάνεια που καταλαμβάνουν τα επιμέρους στοιχεία του συστήματος. Έτσι μπορούμε να βγάλουμε συμπεράσματα για την ενέργεια που απαιτεί η συγκεκριμένη αρχιτεκτονική χωρίς όμως να έχουμε πληροφορίες σχετικά με τον χρόνο προσομοίωσης και τις εντολές που εκτέλεσε στο διάστημα αυτό. Δεν είμαστε έτσι σε θέση να βγάλουμε συμπεράσματα για την ενεργειακή αποδοτικότητα της αρχιτεκτονικής που προσομοιώνει το McPAT.  


#### Ερώτημα 3ο:


| Κατανάλωση Ισχύος Επεξεργαστή |  Xeon  |  Arm A9  |
| :---:             |    :----:     |   :----:      |  
| Total leakage     | 36.8319 W     | 0.108687 W    |
| Runtime Dynamic   | 72.9199 W     | 2.96053 W     |

Μπορούμε να μελετήσουμε την απόδοση αυτή σε 2 κατηγορίες ανάλογα με την κατανάλωση, Dynamic Power και Leakage Power. Αναφερόμενοι στο Dynamic Power ο Xeon καταναλώνει περίπου 25 φορές περισσότερη ισχύ Runtime Dynamic Power, δηλαδή ισχύ κατά την διάρκεια που εκτελείτε η εφαρμογή, σε σχέση με τον ARM. Επομένως με την υπόθεση ότι ο Xeon έχει 40 φορές μεγαλύτερη υπολογιστική ισχύ η ενεργειακή αποδοτικότητα του Xeon ως προς την Δυναμική κατανάλωση Ισχύος είναι περίπου *(72.92 W/ 2.96 W=)*1.65 φορές καλύτερη.

Όμως το σύστημα δεν τερματίζει μετά το πέρας του προγράμματος έτσι για να βγάλουμε συμπεράσματα για την ενεργειακή αποδοτικότητα χρειάζεται να λάβουμε υπόψιν και το Leakage Power. Αυτή η ισχύς καταναλώνεται σε όλη την διάρκεια λειτουργία του συστήματος έτσι για το Xeon είναι περίπου (36.83 W/0.11 W=) 360 φορές μεγαλύτερη από τον Arm. Έτσι βλέπομε ότι ο Xeon καταναλώνει πολύ περισσότερο ισχύ για τον ίδιο χρόνο λειτουργίας σε σχέση με τον Α9.

Επομένoς παρότι ο Xeon έχει καλύτερο Energy Efficiency κατά την εκτέλεση του προγράμματος δεν μπορεί να είναι πιο αποδοτικός από το Α9 για ένα σύστημα που δεν τερματίζει μετά την λήξη της εφαρμογής.



#### Βήμα 2ο:
Ζητείται να προσομοιώσουμε έναν επεξεργαστή με τις επιλογές παραμέτρων που κάναμε στην 2η άσκηση. Πιο συγκεκιμένα χρησιμοποιούμε τα αρχεία που προέκυψαν από τις προσομοιώσεις της προηγούμενης άσκησης και περιλαμβάνουν πληροφορίες για τις παραμέτρους του συστήματος που θέλουμε να προσομοιώσουμε. Επειδή τα αρχεία αυτά προέκυψαν από εκτέλεση του gem5 , πρέπει πρώτα να δημιουργήσουμε ενα xml αρχείο το οποίο θα μπορεί να τρέξει από τον McPAT. Επειδή τα αρχεία της προηγούμενης ασκησης είναι πολλά δημιουργούμε ένα bash script για να αυτοματοποιήσουμε τις εργασίες.

**Eρώτημα 1ο**:
Για να βγάλουμε αποτελέσματα για το EDAP ( Energy – Delay – Area ) χρειαζόμαστε τα στατιστικά και των 2 προσωμοιώσεων. Συγκεκριμένα:

    **Energy** : Χτησιμοποιούμε τα μεγέθη : Runtime Dynamic,Subthreshold Leakage και Gate Leakage από την           
    έξοδο του McPAT.
    **Delay**: Την παράμετρο αυτή θα την βρούμε στο stats του Gem5 από την τιμή sim_seconds.
    **Area**: Θα την βρούμε στην έξοδο του McPAT στα αντίστοιχα πεδία όπως αναφέρεται και στην εκφώνηση.

    Για το Energy Efficiency θα λάβουμε υπόψιν τον λόγο sim_seconds/(Runtime Dynamic + Subthreshold Leakage + Gate Leakage) για κάθε προσομοίωση που έγινε με το ίδιο Benchmark. Έτσι μπορούμε να συγκρίνουμε πιο είναι ενεργειακά αποδοτικότερο για το συγκεκριμένο πρόγραμμα που εκτελέσαμε.
